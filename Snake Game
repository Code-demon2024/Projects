#main
from turtle import Turtle,Screen
import time
from snake import Snake
from food import Food
from scoreboard import Scoreboard

screen = Screen()
screen.setup(600 , 600)
screen.bgcolor("black")
screen.title("My Snake")
screen.tracer(0)
snake = Snake()
screen.listen()
food = Food()
score = Scoreboard()

screen.onkey(snake.up,"Up")
screen.onkey(snake.down,"Down")
screen.onkey(snake.right,"Right")
screen.onkey(snake.left,"Left")

game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)
    snake.move_snake()
    while snake.head.distance(food) < 15:
        food.refresh()
        snake.extend()
        score.add_points()
    if snake.head.xcor() > 280 or snake.head.ycor() > 280 or snake.head.xcor() < -280 or snake.head.ycor() < -280:
        score.reset()
        snake.reset_snake()



    for segment in snake.segments[1:]:
        if  snake.head.distance(segment) < 10:
            score.reset()
            snake.reset_snake()


screen.exitonclick()


#snake
import turtle
from turtle import Turtle
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0

STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
MOVING = 15

class Snake():
    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for position in STARTING_POSITIONS:
            self.add_segments(position)

    def reset_snake(self):
        for seg in self.segments:
            seg.goto(1000,1000)
        self.segments.clear()
        self.create_snake()
        self.head = self.segments[0]

    def add_segments(self, position):
        snake = Turtle("square")
        snake.penup()
        snake.color("white")
        snake.goto(position)
        self.segments.append(snake)

    def extend(self):
        self.add_segments(self.segments[-1].position())

    def move_snake(self):
        for seg_num in range(len(self.segments)-1 , 0 , -1 ):
            new_x =self.segments[seg_num-1].xcor()
            new_y =self.segments[seg_num-1].ycor()
            self.segments[seg_num].goto(new_x, new_y)

        self.head.forward(MOVING)




    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(UP)
    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(DOWN)
    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)
    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)



#score

from turtle import Turtle


class Scoreboard(Turtle):

    def __init__(self):
        super().__init__()
        self.score = 0
        self.high_score = 0
        self.color("white")
        self.penup()
        self.goto(x=0, y=270)
        self.write(f"Score:{self.score}",move=False, align='center', font=('Arial', 12, 'normal'))
        self.hideturtle()

    def update_score(self):
        self.clear()
        self.goto(x=0, y=270)
        self.write(f"Score:{self.score} Highest score:{self.high_score}",move=False, align='center', font=('Arial', 12, 'normal'))



    def add_points(self):
        self.score += 1
        self.clear()
        self.write(f"Score:{self.score}",move=False, align='center', font=('Arial', 12, 'normal'))

    def reset(self):
        if self.score > self.high_score:
            self.high_score = self.score
        self.score = 0
        self.update_score()


#food
from turtle import  Turtle
import random

class Food(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_wid=0.5, stretch_len=0.5)
        self.color("blue")
        self.speed("fastest")
        self.refresh()



    def refresh(self):
        self.goto(x=random.randint(-280, 280), y=random.randint(-280, 280))
